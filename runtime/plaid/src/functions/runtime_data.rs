use super::{get_memory, safely_get_string, safely_write_data_back};
use crate::executor::Env;

use wasmer::{AsStoreRef, FunctionEnvMut, WasmPtr};

macro_rules! generate_runtime_string_getter {
    ($what:ident) => {
        paste::item! {
            #[doc = "Wrap the `" [<get_ $what>] "` call in a native WASM function."]
            pub fn [<get_ $what>](env: FunctionEnvMut<Env>,
                name_buf: WasmPtr<u8>,
                name_len: u32,
                data_buffer: WasmPtr<u8>,
                buffer_size: u32) -> i32 {
                    let Some($what) = &env.data().module.$what else {
                        // This module does not have that field: we just return 0
                        return 0;
                    };
                let store = env.as_store_ref();
                let memory_view = match get_memory(&env, &store) {
                    Ok(memory_view) => memory_view,
                    Err(e) => {
                        error!(
                            "{}: Memory error in get_{}: {:?}",
                            env.data().module.name,
                            stringify!($what),
                            e
                        );
                        return e as i32;
                    }
                };

                let name = match safely_get_string(&memory_view, name_buf, name_len) {
                    Ok(x) => x,
                    Err(e) => {
                        error!(
                            "{}: Error in get_{}: {:?}",
                            env.data().module.name,
                            stringify!($what),
                            e
                        );
                        return e as i32;
                    }
                };

                // Check if this field is present at all
                if let Some(data) = $what.get(&name) {
                    match safely_write_data_back(&memory_view, &data, data_buffer, buffer_size) {
                        Ok(x) => x,
                        Err(e) => {
                            error!(
                                "{}: Error in get_{}: {:?}",
                                env.data().module.name,
                                stringify!($what),
                                e
                            );
                            e as i32
                        }
                    }
                } else {
                    // If there is no field with that name, we return 0 similar to
                    // fetching the from_module
                    0
                }
            }
        }
    };
}

// Documentation for these methods is generated by the macro itself
generate_runtime_string_getter!(secrets);
generate_runtime_string_getter!(accessory_data);
